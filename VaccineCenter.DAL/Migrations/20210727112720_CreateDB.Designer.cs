// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccineCenter;

namespace VaccineCenter.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210727112720_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VaccineCenter.DAL.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTypeId = 1,
                            Email = "roger@gmail.com",
                            FirstName = "Roger",
                            LastName = "LaMontagne",
                            Password = new byte[] { 67, 135, 19, 71, 132, 207, 58, 164, 36, 91, 127, 207, 74, 192, 69, 208, 164, 73, 82, 78, 152, 186, 93, 171, 73, 85, 255, 70, 49, 232, 157, 249 }
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPatient = false,
                            IsStaff = true
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InActivityId")
                        .IsUnique();

                    b.ToTable("Centers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rue des flocons, 6, 6200, Chaleroi",
                            InActivityId = 1,
                            Name = "Vaccine toi"
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("Phone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.InActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Closing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Opening")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InActivitties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Closing = new DateTime(2022, 7, 27, 13, 27, 19, 702, DateTimeKind.Local).AddTicks(1419),
                            Opening = new DateTime(2021, 7, 27, 13, 27, 19, 702, DateTimeKind.Local).AddTicks(1080)
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.InjectionTaken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlanificationsId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanificationsId");

                    b.HasIndex("StaffId");

                    b.ToTable("InjectionTakens");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int>("VaccinInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("LotId");

                    b.HasIndex("VaccinInfoId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LotId")
                        .HasColumnType("bigint");

                    b.Property<int>("VaccinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommunicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationIndications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("NationalRegistrationNumber")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CommunicationId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Planification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccinId");

                    b.ToTable("Planifications");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rue de la montagne, 6",
                            Name = "Biontech"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rue de saint pagne, 89",
                            Name = "Johnson & Johnson"
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            CloseAt = new DateTime(1, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Default",
                            OpenAt = new DateTime(1, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("INAMI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Responsible")
                        .HasColumnType("bit");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Grade = 0,
                            INAMI = "1454548478794692",
                            Responsible = true,
                            WorkspaceId = 1
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Vaccin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ProviderId");

                    b.ToTable("Vaccins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pfizer",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderna",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Aztrazeneka",
                            ProviderId = 2
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.VaccinInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<long>("QuantityAvailable")
                        .HasColumnType("bigint");

                    b.Property<int>("VaccinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("VaccinId");

                    b.ToTable("VaccinInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            QuantityAvailable = 0L,
                            VaccinId = 1
                        },
                        new
                        {
                            Id = 2,
                            CenterId = 1,
                            QuantityAvailable = 0L,
                            VaccinId = 2
                        },
                        new
                        {
                            Id = 3,
                            CenterId = 1,
                            QuantityAvailable = 0L,
                            VaccinId = 3
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rue des flocons, 6, 6200, Chaleroi",
                            CenterId = 1,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Account", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.AccountType", "AccountType")
                        .WithOne("Account")
                        .HasForeignKey("VaccineCenter.DAL.Model.Account", "AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Center", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.InActivity", "InActivity")
                        .WithOne("Center")
                        .HasForeignKey("VaccineCenter.DAL.Model.Center", "InActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InActivity");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.InjectionTaken", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Planification", "Planifications")
                        .WithMany()
                        .HasForeignKey("PlanificationsId");

                    b.HasOne("VaccineCenter.DAL.Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planifications");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Log", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Center", "Center")
                        .WithMany("Log")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.VaccinInfo", "VaccinInfo")
                        .WithMany("Logs")
                        .HasForeignKey("VaccinInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Lot");

                    b.Navigation("VaccinInfo");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Lot", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Vaccin", "Vaccin")
                        .WithMany()
                        .HasForeignKey("VaccinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccin");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Patient", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Communication", "Communication")
                        .WithOne("Patient")
                        .HasForeignKey("VaccineCenter.DAL.Model.Patient", "CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Planification", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Center", "Center")
                        .WithMany("Planifications")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Patient", "Patient")
                        .WithMany("Planification")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Vaccin", "Vaccin")
                        .WithMany("Planifications")
                        .HasForeignKey("VaccinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Patient");

                    b.Navigation("Vaccin");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Schedule", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Center", "Center")
                        .WithMany("Schedule")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Staff", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Workspace", "Workspace")
                        .WithMany("Staffs")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Vaccin", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.VaccinInfo", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Center", "Center")
                        .WithMany("Vaccin")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineCenter.DAL.Model.Vaccin", "Vaccin")
                        .WithMany()
                        .HasForeignKey("VaccinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Vaccin");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Workspace", b =>
                {
                    b.HasOne("VaccineCenter.DAL.Model.Center", "Center")
                        .WithMany("Workspace")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.AccountType", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Center", b =>
                {
                    b.Navigation("Log");

                    b.Navigation("Planifications");

                    b.Navigation("Schedule");

                    b.Navigation("Vaccin");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Communication", b =>
                {
                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.InActivity", b =>
                {
                    b.Navigation("Center");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Patient", b =>
                {
                    b.Navigation("Planification");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Vaccin", b =>
                {
                    b.Navigation("Planifications");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.VaccinInfo", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("VaccineCenter.DAL.Model.Workspace", b =>
                {
                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
